
/**
 * –ì–æ—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WordPress –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ CMS
 * –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à–∏ —Ç–µ–º—ã –∏–ª–∏ –ø–ª–∞–≥–∏–Ω—ã
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CRM_CONFIG = {
    baseUrl: 'https://your-crm.lovable.app', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–π CRM
    telegramBotToken: '5810184722:AAHi5zY4APb_s6G5W6OO7tWJZRWoEjzIQLo',
    telegramChatId: '423648'
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ CRM
 */
async function sendOrderToCRM(orderData) {
    try {
        const crmData = {
            customerName: orderData.customerName,
            customerPhone: orderData.customerPhone,
            customerAddress: orderData.customerAddress || "",
            customerEmail: orderData.customerEmail || "",
            source: "website",
            items: orderData.items || [
                {
                    name: orderData.productName || orderData.title,
                    description: orderData.description || (orderData.promo ? `–ü—Ä–æ–º–æ–∫–æ–¥: ${orderData.promo}` : ""),
                    price: parseFloat(orderData.price) || 0,
                    quantity: parseInt(orderData.quantity) || 1
                }
            ]
        };

        const encodedData = encodeURIComponent(JSON.stringify(crmData));
        
        const response = await fetch(`${CRM_CONFIG.baseUrl}/api/orders/create?data=${encodedData}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        return { success: true, data: result };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ CRM:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
 */
async function sendToTelegram(orderData) {
    try {
        const message = `
–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:
üì¶ –¢–æ–≤–∞—Ä: ${orderData.productName || orderData.title}
üë§ –ò–º—è: ${orderData.customerName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.customerPhone}
üìç –ê–¥—Ä–µ—Å: ${orderData.customerAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: ${orderData.promo || '–ù–µ—Ç'}
üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${orderData.quantity || 1}
        `.trim();

        const telegramUrl = `https://api.telegram.org/bot${CRM_CONFIG.telegramBotToken}/sendMessage?chat_id=${CRM_CONFIG.telegramChatId}&text=${encodeURIComponent(message)}`;
        
        const response = await fetch(telegramUrl);
        return { success: response.ok };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        return { success: false, error: error.message };
    }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
 */
async function processOrder(formElement) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const formData = new FormData(formElement);
    const orderData = {
        customerName: formData.get('name') || formData.get('customer_name'),
        customerPhone: formData.get('phone') || formData.get('tel'),
        customerAddress: formData.get('address') || formData.get('add'),
        customerEmail: formData.get('email'),
        productName: formData.get('product') || formData.get('title'),
        quantity: formData.get('quantity') || formData.get('quan') || 1,
        price: formData.get('price') || 0,
        promo: formData.get('promo') || formData.get('promocode'),
        description: formData.get('description')
    };

    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑:', orderData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [crmResult, telegramResult] = await Promise.all([
        sendOrderToCRM(orderData),
        sendToTelegram(orderData)
    ]);

    return {
        crm: crmResult,
        telegram: telegramResult,
        success: crmResult.success || telegramResult.success
    };
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ñ–æ—Ä–º–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
document.addEventListener('DOMContentLoaded', function() {
    // –ò—â–µ–º —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–ª–∞—Å—Å—É –∏–ª–∏ ID
    const orderForms = document.querySelectorAll('.order-form, #order-form, .checkout-form');
    
    orderForms.forEach(form => {
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const submitBtn = form.querySelector('button[type="submit"], input[type="submit"]');
            const originalText = submitBtn.textContent || submitBtn.value;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
            submitBtn.disabled = true;

            try {
                const result = await processOrder(form);
                
                if (result.success) {
                    alert('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
                    form.reset();
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞.');
            } finally {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                submitBtn.textContent = originalText;
                submitBtn.disabled = false;
            }
        });
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.CRMIntegration = {
    sendOrderToCRM,
    sendToTelegram,
    processOrder,
    config: CRM_CONFIG
};
